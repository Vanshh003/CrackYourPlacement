class Solution {
public:
    // int solve(int ind, bool buy, vector<int> &price, int n, vector<vector<int>> &dp) {
    //     if(ind == n) return 0;
    //     if(dp[ind][buy] != -1) return dp[ind][buy];

    //     int profit = 0;

    //     if(buy) {
    //         int nottake = solve(ind+1, 1, price, n, dp);
    //         int take = -price[ind] + solve(ind, 0, price, n, dp);
    //         profit = max(take, nottake);
    //     }
    //     else {
    //         int notsell = solve(ind+1, 0, price, n, dp);
    //         int sell = price[ind] + solve(ind+1, 1, price, n, dp);
    //         profit = max(sell, notsell);
    //     }

    //     return dp[ind][buy] = profit;
    // }

    int maxProfit(vector<int> &price) {
        int n = price.size();

        vector<vector<int>> dp(n+1, vector<int>(2, 0));

        for(int i=n-1; i>=0; i--) {
            for(int buy=0; buy<=1; buy++) {
                int profit = 0;

                if(buy) {
                    int nottake = dp[i+1][buy];
                    int take = -price[i] + dp[i+1][0];
                    profit = max(take, nottake);
                }
                else {
                    int notsell = dp[i+1][buy];
                    int sell = price[i] + dp[i+1][1];
                    profit = max(sell, notsell);
                }

                dp[i][buy] = profit;
            }
        }

        return dp[0][1];
    }
};
