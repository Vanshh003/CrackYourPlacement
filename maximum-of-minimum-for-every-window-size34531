class Solution {
    public:
    //Function to find maximum of minimums of every window size.
    
    // void nsr(int arr[], vector<int> &v, int n) {
    //     stack<int> st;
        
    //     for(int i=n-1; i>=0; i--) {
    //         while(!st.empty() && arr[st.top()] >= arr[i]) st.pop();
            
    //         if(st.empty()) {
    //             v[i] = -1;
    //             st.push(i);
    //         }
            
    //         if(arr[st.top()] < arr[i]) {
    //             v[i] = st.top();
    //             st.push(i);
    //         }
    //     }
    // }
    
    // void nsl(int arr[], vector<int> &v, int n) {
    //     stack<int> st;
        
    //     for(int i=0; i<n; i++) {
    //         while(!st.empty() && arr[st.top()] >= arr[i]) st.pop();
            
    //         if(st.empty()) {
    //             v[i] = -1;
    //             st.push(i);
    //         }
            
    //         if(arr[st.top()] < arr[i]) {
    //             v[i] = st.top();
    //             st.push(i);
    //         }
    //     }
    // }
    
    // vector <int> maxOfMin(int arr[], int n) {
    //     vector<int> ans(n, 0);
        
    //     vector<int> smallerRight(n, 0);
    //     vector<int> smallerLeft(n, 0);
    
    //     nsr(arr, smallerRight, n);
    //     nsl(arr, smallerLeft, n);
        
    //     for(int i=0; i<n; i++) {
    //         int right = smallerRight[i] == -1 ? n : smallerRight[i];
    //         int left = smallerLeft[i] == -1 ? 0 : smallerLeft[i];
            
    //         int winSize = right - left - 1;
            
    //         ans[winSize] = arr[i];
    //     }
        
    //     return ans;
    // }
    
    
    
    
    
    
    
    
    
    
    vector <int> maxOfMin(int arr[], int n) {
        vector<int> ans(n, 0);
        stack<int> st;
        
        for(int i=0; i<n; i++) {
            while(!st.empty() && arr[st.top()] > arr[i]) {
                int index = st.top();
                st.pop();
                
                // i = next smaller right
                // st.top() = next smaller left
                if(st.empty()) {
                    int winSize = i;
                    ans[winSize - 1] = max(ans[winSize - 1], arr[index]);
                }
                else {
                    int winSize = i - st.top() - 1;
                    ans[winSize - 1] = max(ans[winSize - 1], arr[index]);
                }
                
            }
            
            st.push(i);
        } 
        
        while(!st.empty()) {
            int index = st.top();
            st.pop();
            
            if(st.empty()) {
                // nsr - nsl - 1
                int winSize = n;
                ans[winSize - 1] = max(ans[winSize - 1], arr[index]);
            }
            else {
                int winSize = n - st.top() - 1;
                ans[winSize - 1] = max(ans[winSize - 1], arr[index]);
            }
            
        }
        
        for(int i=n-2; i>=0; i--) ans[i] = max(ans[i], ans[i+1]);
        
        return ans;
    }
    
};
